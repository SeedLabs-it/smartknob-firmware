#pragma once
#include "apps/app.h"
#include <map>

// #include "util.h"
// #include "qrcode.h"
// #include "navigation/navigation.h"
// #include "events/events.h"

// // Fonts
// #include "font/roboto_thin_bold_24.h"
// #include "font/roboto_thin_20.h"
// #include "font/NDS125_small.h"
// #include "font/Pixel62mr11pt7b.h"
#include "lvgl.h"
#include "util.h"
#include "logging.h"
#include "notify/motor_notifier/motor_notifier.h"
#include "notify/wifi_notifier/wifi_notifier.h"
#include "notify/os_config_notifier/os_config_notifier.h"
// #include "./assets/images/skdk/logo"

enum OnboardingFlowPage
{
    WELCOME,
    HASS,
    // WIFI,
    DEMO,
    ABOUT,
    ONBOARDING_FLOW_PAGE_COUNT
};

class BaseScreen
{
public:
    BaseScreen(lv_obj_t *parent) : parent(parent)
    {
        screen = lv_obj_create(parent);
        // lv_obj_set_style_opa(screen, LV_OPA_0, 0);
        lv_obj_remove_style_all(screen);
        lv_obj_set_style_bg_opa(screen, LV_OPA_0, 0);
        lv_obj_set_size(screen, LV_HOR_RES, LV_VER_RES);
        lv_obj_add_flag(screen, LV_OBJ_FLAG_HIDDEN);
    }

    virtual void create_ui() {

    };

    void show()
    {
        lv_obj_remove_flag(screen, LV_OBJ_FLAG_HIDDEN);
    }

    void hide()
    {
        lv_obj_add_flag(screen, LV_OBJ_FLAG_HIDDEN);
    }

protected:
    lv_obj_t *parent;
    lv_obj_t *screen;
};

class WelcomeScreen : public BaseScreen
{
public:
    WelcomeScreen(lv_obj_t *parent) : BaseScreen(parent)
    {
        create_ui();
    }

    void create_ui() override
    {
        BaseScreen::create_ui();

        lv_obj_t *label = lv_label_create(screen);
        lv_label_set_text(label, "SMART KNOB");
        lv_obj_align(label, LV_ALIGN_CENTER, 0, -90);
        lv_obj_set_style_text_font(label, &NDS12_14px, 0);

        label = lv_label_create(screen);
        lv_label_set_text_fmt(label, "DEV KIT v0.1");
        lv_obj_align(label, LV_ALIGN_CENTER, 0, -68);
        lv_obj_set_style_text_font(label, &NDS12_14px, 0);

        lv_obj_t *img = lv_img_create(screen);
        LV_IMAGE_DECLARE(logo_white_transparent);
        lv_img_set_src(img, &logo_white_transparent); // seedlabs_logo should be a C array generated by the LVGL image converter
        lv_obj_set_width(img, logo_white_transparent.header.w);
        lv_obj_set_height(img, logo_white_transparent.header.h);
        lv_obj_align(img, LV_ALIGN_CENTER, 0, 2);

        label = lv_label_create(screen);
        lv_label_set_text(label, "ROTATE TO START");
        lv_obj_align(label, LV_ALIGN_CENTER, 0, 68);
        lv_obj_set_style_text_font(label, &NDS12_14px, 0);
        lv_obj_set_style_text_color(label, LV_COLOR_MAKE(0x80, 0xFF, 0x50), LV_STATE_DEFAULT);
    }
};

class HassScreen : public BaseScreen
{
public:
    HassScreen(lv_obj_t *parent) : BaseScreen(parent)
    {
        create_ui();
    }

    void create_ui() override
    {
        BaseScreen::create_ui();

        lv_obj_t *label = lv_label_create(screen);
        lv_label_set_text(label, "HASS");
        lv_obj_align(label, LV_ALIGN_CENTER, 0, 0);
        lv_obj_set_style_text_font(label, &NDS12_14px, 0);
    }
};

class WiFiScreen : public BaseScreen
{
public:
    WiFiScreen(lv_obj_t *parent) : BaseScreen(parent)
    {
        create_ui();
    }

    void create_ui() override
    {
        BaseScreen::create_ui();

        lv_obj_t *label = lv_label_create(screen);
        lv_label_set_text(label, "WIFI");
        lv_obj_align(label, LV_ALIGN_CENTER, 0, 0);
        lv_obj_set_style_text_font(label, &NDS12_14px, 0);
    }
};

class DemoScreen : public BaseScreen
{
public:
    DemoScreen(lv_obj_t *parent) : BaseScreen(parent)
    {
        create_ui();
    }

    void create_ui() override
    {
        BaseScreen::create_ui();

        lv_obj_t *label = lv_label_create(screen);
        lv_label_set_text(label, "DEMO");
        lv_obj_align(label, LV_ALIGN_CENTER, 0, 0);
        lv_obj_set_style_text_font(label, &NDS12_14px, 0);
    }
};

class AboutScreen : public BaseScreen
{
public:
    AboutScreen(lv_obj_t *parent) : BaseScreen(parent)
    {
        create_ui();
    }

    void create_ui() override
    {
        BaseScreen::create_ui();

        lv_obj_t *label = lv_label_create(screen);
        lv_label_set_text(label, "ABOUT");
        lv_obj_align(label, LV_ALIGN_CENTER, 0, 0);
        lv_obj_set_style_text_font(label, &NDS12_14px, 0);
    }
};

class ScreenManager
{
public:
    void add_screen(OnboardingFlowPage page, BaseScreen *screen)
    {
        screens[page] = screen;
    }

    void show_screen(uint8_t page)
    {
        for (auto &it : screens)
        {
            if (it.first == page)
            {
                it.second->show();
            }
            else
            {
                it.second->hide();
            }
        }
    }

    void hide_screen(uint8_t page)
    {
        for (auto &it : screens)
        {
            if (it.first == page)
            {
                it.second->hide();
            }
        }
    }

private:
    std::map<uint8_t, BaseScreen *> screens;
};
// // TODO make this enum ?
class OnboardingFlow

{
public:
    OnboardingFlow();

    void render();

    EntityStateUpdate update(AppState state);
    EntityStateUpdate updateStateFromKnob(PB_SmartKnobState state);

    void setWiFiNotifier(WiFiNotifier *wifi_notifier);
    void setOSConfigNotifier(OSConfigNotifier *os_config_notifier);
    void setMotorNotifier(MotorNotifier *motor_notifier);
    void triggerMotorConfigUpdate();

private:
    uint8_t current_position = 0;
    char firmware_version[16];

    PB_SmartKnobConfig root_level_motor_config;
    PB_SmartKnobConfig blocked_motor_config;

    WiFiNotifier *wifi_notifier;
    OSConfigNotifier *os_config_notifier;
    MotorNotifier *motor_notifier;

    void indicatorDots();

    void welcomeScreenInit();
    void hassScreenInit();
    void wifiScreenInit();
    void demoScreenInit();
    void aboutScreenInit();

    lv_obj_t *overlay;
    lv_obj_t *main_screen;
    lv_obj_t *screens[ONBOARDING_FLOW_PAGE_COUNT];

    ScreenManager screen_mgr;
};
