#pragma once
#include "apps/app.h"
#include <map>
#include "./display/page_manager.h"

// #include "util.h"
// #include "qrcode.h"
// #include "navigation/navigation.h"
// #include "events/events.h"

// // Fonts
// #include "font/roboto_thin_bold_24.h"
// #include "font/roboto_thin_20.h"
// #include "font/NDS125_small.h"
// #include "font/Pixel62mr11pt7b.h"
#include "lvgl.h"
#include "util.h"
#include "logging.h"
#include "notify/motor_notifier/motor_notifier.h"
#include "notify/wifi_notifier/wifi_notifier.h"
#include "notify/os_config_notifier/os_config_notifier.h"
// #include "./assets/images/skdk/logo"

enum OnboardingFlowPages
{
    WELCOME,
    HASS,
    // WIFI,
    DEMO,
    ABOUT,
    ONBOARDING_FLOW_PAGE_COUNT
};

class WelcomePage : public BasePage
{
public:
    WelcomePage(lv_obj_t *parent) : BasePage(parent)
    {
        lv_obj_t *label = lv_label_create(page);
        lv_label_set_text(label, "SMART KNOB");
        lv_obj_align(label, LV_ALIGN_CENTER, 0, -90);
        lv_obj_set_style_text_font(label, &NDS12_14px, 0);

        label = lv_label_create(page);
        lv_label_set_text_fmt(label, "DEV KIT v0.1");
        lv_obj_align(label, LV_ALIGN_CENTER, 0, -68);
        lv_obj_set_style_text_font(label, &NDS12_14px, 0);

        lv_obj_t *img = lv_img_create(page);
        LV_IMAGE_DECLARE(logo_white_transparent);
        lv_img_set_src(img, &logo_white_transparent); // seedlabs_logo should be a C array generated by the LVGL image converter
        lv_obj_set_width(img, logo_white_transparent.header.w);
        lv_obj_set_height(img, logo_white_transparent.header.h);
        lv_obj_align(img, LV_ALIGN_CENTER, 0, 2);

        label = lv_label_create(page);
        lv_label_set_text(label, "ROTATE TO START");
        lv_obj_align(label, LV_ALIGN_CENTER, 0, 68);
        lv_obj_set_style_text_font(label, &NDS12_14px, 0);
        lv_obj_set_style_text_color(label, LV_COLOR_MAKE(0x80, 0xFF, 0x50), LV_STATE_DEFAULT);
    }
};

class HassPage : public BasePage
{
public:
    HassPage(lv_obj_t *parent) : BasePage(parent)
    {
        lv_obj_t *label = lv_label_create(page);
        lv_label_set_text(label, "HASS");
        lv_obj_align(label, LV_ALIGN_CENTER, 0, 0);
    }
};

// class WiFiPage : public BasePage
// {
// public:
//     WiFiPage(lv_obj_t *parent) : BasePage(parent)
//     {
//         lv_obj_t *label = lv_label_create(page);
//         lv_label_set_text(label, "WiFi Configuration");
//         lv_obj_align(label, LV_ALIGN_CENTER, 0, 0);
//     }
// };

class DemoPage : public BasePage
{
public:
    DemoPage(lv_obj_t *parent) : BasePage(parent)
    {
        lv_obj_t *label = lv_label_create(page);
        lv_label_set_text(label, "Demo Mode");
        lv_obj_align(label, LV_ALIGN_CENTER, 0, 0);
    }
};

class AboutPage : public BasePage
{
public:
    AboutPage(lv_obj_t *parent) : BasePage(parent)
    {
        lv_obj_t *label = lv_label_create(page);
        lv_label_set_text(label, "About");
        lv_obj_align(label, LV_ALIGN_CENTER, 0, 0);
    }
};

class OnboardingPageManager : public PageManager<OnboardingFlowPages>
{
public:
    OnboardingPageManager(lv_obj_t *parent) : PageManager<OnboardingFlowPages>(parent)
    {
        add(WELCOME, new WelcomePage(parent));
        add(HASS, new HassPage(parent));
        add(DEMO, new DemoPage(parent));
        add(ABOUT, new AboutPage(parent));
    }

    void createOverlay()
    {
        overlay_ = lv_obj_create(parent_);
        lv_obj_set_size(overlay_, LV_HOR_RES, LV_VER_RES);
    }
};

class OnboardingFlow

{
public:
    OnboardingFlow();

    void render();

    EntityStateUpdate update(AppState state);
    EntityStateUpdate updateStateFromKnob(PB_SmartKnobState state);

    void setWiFiNotifier(WiFiNotifier *wifi_notifier);
    void setOSConfigNotifier(OSConfigNotifier *os_config_notifier);
    void setMotorNotifier(MotorNotifier *motor_notifier);
    void triggerMotorConfigUpdate();

private:
    uint8_t current_position = 0;
    char firmware_version[16];

    PB_SmartKnobConfig root_level_motor_config;
    PB_SmartKnobConfig blocked_motor_config;

    WiFiNotifier *wifi_notifier;
    OSConfigNotifier *os_config_notifier;
    MotorNotifier *motor_notifier;

    void indicatorDots();

    void welcomeScreenInit();
    void hassScreenInit();
    void wifiScreenInit();
    void demoScreenInit();
    void aboutScreenInit();

    lv_obj_t *overlay;
    lv_obj_t *main_screen = lv_obj_create(NULL);

    OnboardingPageManager *page_mgr = new OnboardingPageManager(main_screen);
};